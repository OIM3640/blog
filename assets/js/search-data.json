{
  
    
        "post0": {
            "title": "6. Conditionals",
            "content": "Conditional statements . In order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. Conditional statements give us this ability. . . age = 20 if age &gt;= 18: print(&#39;Your age is&#39;, age) print(&#39;adult&#39;) . The boolean expression after if is called the condition. If it is true, the indented statement runs. If not, nothing happens. . Alternative execution . age = 3 if age &gt;= 18: print(&#39;your age is&#39;, age) print(&#39;adult&#39;) else: # don&#39;t forget this colon print(&#39;your age is&#39;, age) print(&#39;teenager&#39;) . Chained conditionals . elif is short for else if. Let&#39;s see this example: . age = 3 if age &gt;= 18: print(&#39;adult&#39;) elif age &gt;= 6: print(&#39;teenager&#39;) else: print(&#39;kid&#39;) . Q. What will be printed after executing the following code? . age = 20 if age &gt;= 6: print(&#39;teenager&#39;) elif age &gt;= 18: print(&#39;adult&#39;) else: print(&#39;kid&#39;) . Nested conditionals . if x == y: print(&#39;x and y are equal&#39;) else: if x &lt; y: print(&#39;x is less than y&#39;) else: print(&#39;x is greater than y&#39;) . Exercise 01 . 1. Fermat’s Last Theorem says that there are no positive integers a, b, and c such that $a^n + b^n = c^n$ for any values of n greater than 2. . Write a function named check_fermat that takes four parameters — a, b, c and n — and checks to see if Fermat’s theorem holds. If n is greater than 2 and $a^n + b^n = c^n$, the program should print: . “Holy smokes, Fermat was wrong!” . Otherwise the program should print:&gt; “No, that doesn’t work.” . | Write another function that prompts the user to input values for a, b, c and n, converts them to integers, and uses check_fermat to check whether they violate Fermat’s theorem. | 2. Write a function, calculate_bmi that takes two parameters, weight and height, to return BMI value. Write another function, get_bmi_category that prompts user to input values for weight and height, converts them to floats, uses calculate_bmi to calculate BMI value, and returns the corresponding BMI category. . . BMI Categories: . Underweight = &lt;18.5 | Normal weight = 18.5–24.9 | Overweight = 25–29.9 | Obesity = BMI of 30 or greater | . Recursion . It is legal for one function to call another; it is also legal for a function to call itself. It may not be obvious why that is a good thing, but it turns out to be one of the most magical things a program can do. For example, look at the following function: . def countdown(n): if n &lt;= 0: print(&#39;Blastoff!&#39;) else: print(n) countdown(n-1) . Q. What happens if we call this function like this . countdown(3) . A function that calls itself is recursive; the process of executing it is called recursion. . As another example, we can write a function that prints a string n times. . def print_n(s, n): if n &lt;= 0: return print(s) print_n(s, n-1) . Infinite recursion . def recurse(): recurse() . If you write encounter an infinite recursion by accident, review your function to confirm that there is a base case that does not make a recursive call. And if there is a base case, check whether you are guaranteed to reach it. . Exercise 02 . 1. Write a program, factorial.py to compute a factorial of an integer, n. . 2. Write a program, fibonacci.py to compute the Fibonacci number of an integer , n. . 3. The greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. For example, . gcd(2, 12) = 2 gcd(6, 12) = 6 gcd(9, 12) = 3 gcd(17, 12) = 1 . See this website for an example of Euclid&#39;s algorithm being used to find the gcd. https://en.wikipedia.org/wiki/Euclidean_algorithm#Worked_example . Write a program, greatest_common_divisor.py to implement this idea recursively. The function gcd() takes in two positive integers and returns one integer. . 4. (Optional) Implement recusive algorithm for game: the Tower of Hanoi. . More about the game: https://www.mathsisfun.com/games/towerofhanoi.html . def move(n, source, bridge, destination): pass # need to be modified move(3, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;) # Expected output: # A --&gt; C # A --&gt; B # C --&gt; B # A --&gt; C # B --&gt; A # B --&gt; C # A --&gt; C . A visualized version of Tower of Hanoi code can be found here. .",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/06-conditional.html",
            "relUrl": "/python/2021/09/20/06-conditional.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "5. Case - Interface Design",
            "content": "This chapter presents a case study that demonstrates a process for designing functions that work together. It introduces the turtle module, which allows you to create images using turtle graphics.The turtle module is included in most Python installations. . https://docs.python.org/3/library/turtle.html . The turtle module . import turtle leo = turtle.Turtle() . Create a file named my_polygon.py and type in the following code: . import turtle leo = turtle.Turtle() print(leo) #This tells us that leo refers to an object with type Turtle as defined in module turtle. turtle.mainloop() . mainloop tells the window to wait for the user to do something, although in this case there’s not much for the user to do except close the window. . Then we call a method to move the small arrow around the window. . leo.fd(100) . Calling a method is like making a request: you are asking leo to move forward. The argument of fd is a distance in pixels, so the actual size depends on your display. . To draw a right angle, add these lines to the program (after creating leo and before calling mainloop): . leo.fd(100) leo.lt(90) leo.fd(100) . Exercise 01 . Now modify the program to draw a square. . Simple repetition . We can do the same thing more concisely with a for statement. . A for statement is also called a loop because the flow of execution runs through the body and then loops back to the top. . for i in range(4): print(&#39;Hello!&#39;) . Exercise 02 . The following sections have solutions to the exercises, so don’t look until you have finished (or at least tried). . 1. Write a function called square that takes a parameter named t, which is a turtle. It should use the turtle to draw a square. Write a function call that passes leo as an argument to square, and then run the program again. . 2. Add another parameter, named length, to square. Modify the body so length of the sides is length, and then modify the function call to provide a second argument. Run the program again. Test your program with a range of values for length. . 3. Make a copy of square and change the name to polygon. Add another parameter named n and modify the body so it draws an n-sided regular polygon. Hint: The exterior angles of an n-sided regular polygon are 360/n degrees. . 4. Write a function called circle that takes a turtle, t, and radius, r, as parameters and that draws an approximate circle by calling polygon with an appropriate length and number of sides. Test your function with a range of values of r. Hint: figure out the circumference of the circle and make sure that length * n = circumference. . 5. Make a more general version of circle called arc that takes an additional parameter angle, which determines what fraction of a circle to draw. angle is in units of degrees, so when angle=360, arc should draw a complete circle. . Encapsulation . def square(t): for i in range(4): t.fd(100) t.lt(90) square(leo) . Inside the function, t refers to the same turtle leo, so t.lt(90) has the same effect as leo.lt(90). In that case, why not call the parameter leo? The idea is that t can be any turtle, not just leo, so you could create a second turtle and pass it as an argument to square: . raphael = turtle.Turtle() square(raphael) . Wrapping a piece of code up in a function is called encapsulation. . Generalization . def square(t, length): for i in range(4): t.fd(length) t.lt(90) square(leo, 100) . Adding a parameter to a function is called generalization because it makes the function more general: in the previous version, the square is always the same size; in this version it can be any size. . def polygon(t, n, length): angle = 360 / n for i in range(n): t.fd(length) t.lt(angle) polygon(leo, 7, 70) . When a function has more than a few numeric arguments, it is easy to forget what they are, or what order they should be in. In that case it is often a good idea to include the names of the parameters in the argument list: . polygon(leo, n=7, length=70) . These are called keyword arguments because they include the parameter names as “keywords”. https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments . This syntax makes the program more readable. It is also a reminder about how arguments and parameters work: when you call a function, the arguments are assigned to the parameters. . Interface design . import math def circle(t, r): circumference = 2 * math.pi * r n = 50 length = circumference / n polygon(t, n, length) . The interface of a function is a summary of how it is used: what are the parameters? What does the function do? And what is the return value? An interface is “clean” if it allows the caller to do what they want without dealing with unnecessary details. . Rather than clutter up the interface, it is better to choose an appropriate value of n depending on circumference: . def circle(t, r): circumference = 2 * math.pi * r n = int(circumference / 3) + 1 length = circumference / n polygon(t, n, length) . Refactoring . def arc(t, r, angle): arc_length = 2 * math.pi * r * angle / 360 n = int(arc_length / 3) + 1 step_length = arc_length / n step_angle = angle / n for i in range(n): t.fd(step_length) t.lt(step_angle) . The second half of this function looks like polygon, but we can’t reuse polygon without changing the interface. We could generalize polygon to take an angle as a third argument, but then polygon would no longer be an appropriate name! Instead, let’s call the more general function polyline: . def polyline(t, n, length, angle): for i in range(n): t.fd(length) t.lt(angle) . Now we can rewrite polygon and arc. . def polygon(t, n, length): angle = 360.0 / n polyline(t, n, length, angle) def arc(t, r, angle): arc_length = 2 * math.pi * r * angle / 360 n = int(arc_length / 3) + 1 step_length = arc_length / n step_angle = float(angle) / n polyline(t, n, step_length, step_angle) . Finally, we can rewrite circle: . def circle(t, r): arc(t, r, 360) . This process - rearranging a program to improve interfaces and facilitate code reuse - is called refactoring. In this case, we noticed that there was similar code in arc and polygon, so we “factored it out” into polyline. . docstring . A docstring is a string at the beginning of a function that explains the interface (“doc” is short for “documentation”). Here is an example: . def polyline(t, n, length, angle): &quot;&quot;&quot;Draws n line segments with the given length and angle (in degrees) between them. t is a turtle. &quot;&quot;&quot; for i in range(n): t.fd(length) t.lt(angle) . Exercise 03 . 1. Write an appropriately general set of functions that can draw shapes as below. Tips: draw 60 squares, turning right 5 degrees after each square. . 2. Write an appropriately general set of functions that can draw shapes as below. Tips: draw 60 squares, turning 5 degrees after each square and making each successive square bigger. Start at a length of 30 and increment 4 units every square. . . 3. Write an appropriately general set of functions that can draw shapes as below. . . 4. Write an appropriately general set of functions that can draw any other kind of spiral, such as an Archimedian spiral. Read more about spirals at http://en.wikipedia.org/wiki/Spiral. . Exercise 04 (optional) . Write an appropriately general set of functions that can draw shapes as below. The third shape is optional. . .",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/05-turtle.html",
            "relUrl": "/python/2021/09/20/05-turtle.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "4. Functions",
            "content": "In the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements. Later, you can &quot;call&quot; the function by name. . Why functions? . We know the area of a circle is: $A= πr^2$. Suppose we need to calculate the areas of three circles, we can do: . $r_1 = 20.16$ . $r_2 = 9.13$ . $r_3 = 11.55$ . $A_1 = 3.14 * r_1^2$ . $A_2 = 3.14 * r_2^2$ . $A_3 = 3.14 * r_3^2$ . Question: Is there an easier way to do this? . Question: What if we change $π$ to 3.14159 instead of 3.14? . If a function area_of_cicle(x) is defined, then we could reuse it many times, like this . a_1 = area_of_cicle(r_1) a_2 = area_of_cicle(r_2) a_3 = area_of_cicle(r_3) . Function calls . Example of a function call: . type(42) . The name of the function is type. The expression in parentheses is called the argument of the function. The result, for this function, is the type of the argument. . It is common to say that a function &quot;takes&quot; an argument and &quot;returns&quot; a result. The result is also called the return value. . To know more about this function, visit the documentation https://docs.python.org/3/library/functions.html#type. . type(&#39;42&#39;) . int(&#39;42&#39;) . int(&#39;Hello&#39;) . int(3.99) . int(-2.3) . float(42) . float(&#39;3.14&#39;) . str(42) . str(3.14) . abs(-100) . abs(-100, 42) . max(1, 2) . max(43, 5345, -654, 2, 0, 99999) . Exercise 01 . Play with functions round(), min(), ord(), chr(). Read documentation https://docs.python.org/3/library/functions.html. . Math functions . Python has a math module that provides most of the familiar mathematical functions. A module is a file that contains a collection of related functions. Before we can use the functions in a module, we have to import it with an import statement: . import math . This statement creates(borrows) a module object named math. If you display the module object, you get some information about it: . math . &lt;module &#39;math&#39; (built-in)&gt; . help(math) . How to call a function? By using dot. . ratio = 100 math.log10(ratio) . degrees = 45 radians = degrees / 180.0 * math.pi # math.pi is not a function. It is a constant. math.sin(radians) . Exercise 02 . From the documentation of math module https://docs.python.org/3/library/math.html, pick up two functions and play with them. . Add new functions . We can define our own functions. . Example: . def print_lyrics(): print(&quot;Hey Jude. Don&#39;t make it bad.&quot;) print(&quot;Take a sad song and make it better.&quot;) . type(print_lyrics) . function . print_lyrics() . Hey Jude. Don&#39;t make it bad. Take a sad song and make it better. . We can use a function inside another function. . def repeat_lyrics(): print_lyrics() print(&#39;Na - na - na - na - na, na - na - na - na&#39;) print_lyrics() . repeat_lyrics() . Hey Jude. Don&#39;t make it bad. Take a sad song and make it better. Na - na - na - na - na, na - na - na - na Hey Jude. Don&#39;t make it bad. Take a sad song and make it better. . Parameters and arguments . Some of the functions we have seen require arguments. For example, when you call math.sin you pass a number as an argument. . Inside the function, the arguments are assigned to variables called parameters. Here is a definition for a function that takes an argument: . def print_twice(whatever_name): print(whatever_name) print(whatever_name) . print_twice(&#39;Babson&#39;) . Babson Babson . my_name = &#39;Jack&#39; print_twice(my_name) . Jack Jack . Exercise 03 . Define a function my_abs to print the absolute value of any number. Note: you are not allowed to use built-in function abs(). . Variables and parameters are local . When you create a variable inside a function, it is local, which means that it only exists inside the function. For example: . def cat_twice(part1, part2): cat = part1 + part2 print_twice(cat) . This function takes two arguments, concatenates them, and prints the result twice. Here is an example that uses it: . line1 = &#39;Bing tiddle &#39; line2 = &#39;tiddle bang.&#39; cat_twice(line1, line2) . Bing tiddle tiddle bang. Bing tiddle tiddle bang. . However, when cat_twice terminates, the variable cat is destroyed. If we try to print it, we get an exception: . print(cat) . NameError Traceback (most recent call last) &lt;ipython-input-14-34599fba884e&gt; in &lt;module&gt; -&gt; 1 print(cat) NameError: name &#39;cat&#39; is not defined . Parameters are also local. For example, outside function print_twice, there is no such thing as whatever_name. . Functions with return value(s) and void functions . Return values: . def give_me_a_break(): str1 = &#39;break&#39; return str1 . print(give_me_a_break()) . def give_me_a_break(): str1 = &#39;break&#39; return str1 print(&#39;another break&#39;) print(give_me_a_break()) . Void functions: . Void functions might display something on the screen or have some other effect, but they don’t have a return value. If you assign the result to a variable, you get a special value called None. . result = print_twice(&#39;Bing&#39;) . print(result) . Exercise 04 . Modify the function my_abs to return the absolute value of any number. . Empty function . When we have not decided how to write this function, just use pass to make it run. . def nop(): pass . We can use pass in other statements as well. . age= int(input()) if age &gt;= 18: pass # without pass, you will see error. . Argument checking . Let&#39;s see an example first: . abs(&#39;A&#39;) . Exercise 05 . Modify the function my_abs to first only allow integers and floating numbers, then return the absolute value of any number. You may need a built-in function isinstance() https://docs.python.org/3/library/functions.html#isinstance. . Return more than one value . Take a game program as an example: a function move is created to return the new coordinates - nx and ny - after moving certain steps. . import math def move(x, y, step, angle): nx = x + step * math.cos(angle) ny = y - step * math.sin(angle) return nx, ny x, y = move(100, 100, 60, math.pi / 6) print(x, y) . Exercise 06 . Define a function quadratic(a, b, c) to solve a quadratic equation and return the values of two roots: . $ax^2 + bx + c = 0$ . def quadratic(a, b, c): pass # please modify it so the function solves the quadratic equation and return two values .",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/04-functions.html",
            "relUrl": "/python/2021/09/20/04-functions.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "3. Data Types",
            "content": "The Python Conceptual Hierarchy . Before we get to the code, let’s first establish a clear picture of how this chapter fits into the overall Python picture. From a more concrete perspective, Python programs can be decomposed into modules, statements, expressions, and objects, as follows: . Programs are composed of modules. | Modules contain statements. | Statements contain expressions. | Expressions create and process objects | . Numbers: . Intergers: no fractional part . Floating-point numbers: with fractional part. . 3.14e-2 # Scientific notation . 123 + 222 # Integer addition . 1.5 * 4 # Floating-point multiplication . 2 ** 100 # 2 to the power 100 . len(str(2 ** 1000000)) # How many digits in a really BIG number? . import math print(math.pi) print(math.sqrt(85)) . The math module contains more advanced numeric tools as functions, while the random module performs random-number generation and random selections (here, from a Python list coded in square brackets — an ordered collection of other objects to be introduced later): . import random print(random.random()) random.choice([1, 2, 3, 4]) . String: . &quot; . &#39; . Question: What if there&#39;s quotation mark in the string? . print(&#39;I &#39;m &quot;ok &quot;.&#39;) # Use escape character . print(&#39;I &#39;m learning nPython.&#39;) . print(&#39; n &#39;) . We could use r&#39;&#39; to avoid escape character: . print(&#39; t &#39;) . print(r&#39; t &#39;) . Instead of n, we could use &#39;&#39;&#39;...&#39;&#39;&#39; to display multiple lines. . print(&#39;&#39;&#39;line1 ... line2 ... line3&#39;&#39;&#39;) . Boolean . either True or False. . True . False . 3 &gt; 2 . 3 &gt; 5 . Logical operators: and, or, not . True and True . True and False . False and False . 5 &gt; 3 and 3 &gt; 1 . True or True . True or False . False or False . 5 &gt; 3 or 1 &gt; 3 . not True . not False . not 1 &gt; 2 . We often use Boolean type in conditional statements: . if age &gt;= 21: print(&#39;Yes, you can.&#39;) else: print(&#39;Sorry.&#39;) . Precedence matters . General rule: arithmetic &gt; comparison &gt; not &gt; and/or . Much more detailed operator precedence: https://docs.python.org/3/reference/expressions.html#operator-precedence . 5 * 7 &gt;= 3 + 5 * (7 - 1) and not False 35 &gt;= 3 + 5 * 6 and not False 35 &gt;= 3 + 30 and not False 35 &gt;= 33 and not False True and not False True and True True . Nonetype . None . The sole value of the type NoneType. None is frequently used to represent the absence of a value, as when default arguments are not passed to a function. . Exercises . 1. Below is a transcript of a session with the Python shell. For each expression being evaluated, provide the type and the value the expression returns. I encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions. . a = 3 a + 2 . a = a + 1.0 a . a = 3 b . a = 3 a == 5.0 a . b = 10 c = b &gt; 9 c . 5/2 == 5/2.0 . 2. For each of the following expressions, indicate the value returned. I encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions. . 3.0 - 1.0 != 5.0 - 3.0 . 3 &gt; 4 or (2 &lt; 3 and 9 &gt; 10) . 4 &gt; 5 or 3 &lt; 4 and 9 &gt; 8 . not(4 &gt; 3 and 100 &gt; 6) . 3. The time module provides a function, also named time, that returns the current Greenwich Mean Time in “the epoch”, which is an arbitrary time used as a reference point. On UNIX systems, the epoch is 1 January 1970. . import time print(time.time()) . Write a script that reads the current time and converts it to a time of day in hours, minutes, and seconds, plus the number of days since the epoch. You can only use time module. .",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/03-types.html",
            "relUrl": "/python/2021/09/20/03-types.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "2. Variables, Expressions and Statements",
            "content": "Input and Output . The simplest way to input and output is to use the built-in functions print() and input(). . Output . print(&#39;Hello, World!&#39;) print(&#39;Hey Jude&#39;, &#39;don &#39;t make it bad&#39;) . print (&#39;The total number of overall medals in Tokyo 2020 is&#39;, 39 + 41 + 33) print (&#39;39 + 41 + 33 =&#39;, 39 + 41 + 33) . Input . Python provides a built-in function called input that stops the program and waits for the user to type something. When the user presses Return or Enter, the program resumes and input returns what the user typed as a string. . name = input() . name . Question: What is a variable? . print(name) . Exercise 01 . Modify hello.py to . name = input() print(&#39;Hello, &#39;, name) . Then rewrite it to ask user to enter his/her name first. . Assignment statements . An assignment statement creates a new variable and gives it a value: . message = &#39;I did something cool today!&#39; n = 100 pi = 3.14 . Variable names . anything meaningful | any length | can contain letters, numbers and underscore _ | not begin with number | conventionally only lower case | . Ilegal names . 76ers = &#39;Philadelphia 76ers&#39; . more@ = 10000 . class = &#39;Problem Solving&#39; . Because class is one of Python&#39;s keywords. . More reserved words, or keywords of Python: . https://docs.python.org/3/reference/lexical_analysis.html#keywords . DO NOT use them as variable names or file names. . Expressions and statements . An expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable. . Examples of expressions: . 42 . n . n + 100 . When you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. . A statement is a unit of code that has an effect, like creating a variable or displaying a value. . Examples of statements: . n = 100 print(n) . When you type a statement, the interpreter executes it, which means that it does whatever the statement says. In general, statements don’t have values. . Dynamic language . Variable could be declared again. . a = 123 # a is an integer print(a) a = &#39;ABC&#39; # a becomes a string print(a) . Assignment = is not equation in mathematics! For example: . x = 10 x = x + 2 # This does not make sense in mathematics, # but it is perfectly ok in Python. print(x) . What&#39;s happening in RAM. . Example: . a = &#39;ABC&#39; . Two things happen: . a string &#39;ABC&#39; is created in RAM | a variable a is created in RAM. It is referencing to &#39;ABC&#39; | a = &#39;ABC&#39; b = a a = &#39;XYZ&#39; print(b) . Step by step: . . . . Order of operations . For mathematical operators, Python follows mathematical convention. . String operations . In general, you can’t perform mathematical operations on strings. . &#39;2&#39; -&#39;1&#39; . &#39;EU&#39; - &#39;Great Britain&#39; . However, + and * could be used carefully. . The + operator performs string concatenation, which means it joins the strings by linking them end-to-end. For example: . first_name = &#39;John&#39; last_name = &#39;Lennon&#39; first_name + last_name . The * operator also works on strings; it performs repetition. For example: . &#39;Naah, na na nanana naah, nanana naah, hey Jude. &#39; * 10 . String Formating . How do we output formated string? Let&#39;s see some examples: . name = &#39;world&#39; print(f&#39;Hello, {name}&#39;) . actor = &#39;Joaquin Phoenix&#39; year = 2020 movie = &#39;Joker&#39; print(f&#39;{actor} wins Best Actor for {movie} at Golden Globes {year}.&#39;) . More f-string formatting . pi = 3.1415926 print(f&#39;Pi equals {pi:.5f}.&#39;) print(f&#39;Pi equals {pi:8.5f}.&#39;) print(f&#39;Pi equals {pi:8.2f}.&#39;) . a = 2021 # binary print(f&#39;{a:b}&#39;) # hexadecimal print(f&quot;{a:x}&quot;) # octal print(f&quot;{a:o}&quot;) # scientific print(f&quot;{a:e}&quot;) . s1 = &#39;a&#39; s2 = &#39;ab&#39; s3 = &#39;abc&#39; s4 = &#39;abcd&#39; print(f&#39;{s1:&gt;10}&#39;) print(f&#39;{s2:&gt;10}&#39;) print(f&#39;{s3:&gt;10}&#39;) print(f&#39;{s4:&gt;10}&#39;) . More about f-strings: . https://www.python.org/dev/peps/pep-0498/ . Comments . Question: Why do we need comments? . minute = 45 # current time # compute the percentage of the hour that has elapsed percentage = (minute * 100) / 60 . Exercise 02 . Create file calc_2.py to answer the following questions. Add comments when necessary. . The volume of a sphere with radius r is $$(4/3) pi r^3.$$ What is the volume of a sphere with radius 5? . | Suppose the cover price of a book is $24.95, but bookstores get a 40% discount. Shipping costs $3 for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies? . | If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast? . | If my average grade rises from 82 to 89. What is the percentage of the increase? Format the result as xx.x%. Keep one figure after decimal point. . |",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/02-variables-expressions-statements.html",
            "relUrl": "/python/2021/09/20/02-variables-expressions-statements.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "1. Introduction to Python Programming",
            "content": "Problem solving is one of the most important skills that everyone should learn and practice. The process of learning to program (especially using Python) is an excellent opportunity to practice problem-solving skills. . Extended readings: . https://avc.com/2011/10/program-or-be-programmed/When human beings acquired language, we learned not just how to listen but how to speak. When we gained literacy, we learned not just how to read but how to write. And as we move into an increasingly digital reality, we must learn not just how to use programs but how to make them. In the emerging, highly programmed landscape ahead, you will either create the software or you will be the software. It&#39;s really that simple:Program, or be programmed. . | . What is a program? . A program is a sequence of instructions that specifies how to perform a computation. The computation might be something mathematical, such as solving a system of equations or finding the roots of a polynomial; it can also be a symbolic computation, such as searching and replacing text in a document or something graphical, like processing an image or playing a video. . Question: What are the basic elements of a program? . Why Python? . Python is a general-purpose, high-level programming language designed by Guido van Rossum. | Python is really (yes, really) easy to learn. | Lot of libraries: network, files, GUI, database... | Python is simple and elegant. | . Extended readings: . https://docs.python.org/3/tutorial/appetite.html | The Zen of Python. https://www.python.org/dev/peps/pep-0020/ | . Why Python 3? . Short version: Python 2.x is legacy, Python 3.x is the present and future of the language. . - https://www.python.org/doc/sunset-python-2/ . Python Installation . Go to https://www.python.org/downloads/. Select the latest version of Python 3.9 (currently Python 3.9.7), click &#39;download&#39;. Before clicking &#39;Install Now&#39;, check &#39;Add Python 3.9 to PATH&#39;. . Python interpretor . The Python interpreter is a program that reads and executes Python code. Depending on your environment, you might start the interpreter by clicking on an icon, or by typing &#39;python&#39; on a command line. When it starts, you should see output like this: . . Check the version number. . The last line is a prompt that indicates that the interpreter is ready for you to enter code. If you type a line of code and hit the Enter key, the interpreter displays the result: . . Now you’re ready to get started. . Using IDLE . IDLE is the standard Python development environment. Its name is an acronym of &quot;Integrated DeveLopment Environment&quot;. It works well on both Unix and Windows platforms. It has a Python shell window, which gives you access to the Python interactive mode. It also has a file editor that lets you create and edit existing Python source files. . Your first Python program . Before starting this exciting journey, I want you to read the following sentences three times: . DO NOT copy/paste other people&#39;s code. Type it out! . Now, start Python interpreter or IDLE. . Traditionally, the first program you write in a new language is called &quot;Hello, World!&quot; because all it does is display the words &quot;Hello, World!&quot;. In Python, it looks like this: . print(&#39;Hello, World&#39;) . Congratulations! You just finished your first Python program! . This is an example of a print statement, although it doesn’t actually print anything on paper. It displays a result on the screen. . Q: What are the parentheses for? What about quotation marks? . Let&#39;s try something else. . 1 + 1 . exit() . Oops, where is the code? How can I display &quot;Hello, World!&quot; again? . Use text editor . You can use Notepad to write Python program. Remember to save the text file as .py file. I recommend Visual Studio Code as your default Python program editor. . https://code.visualstudio.com/ . Why VS Code? . Highlighting syntax. | Built-in Git. You need a GitHub account. https://github.com/ | Running and debugging using Python extension. https://marketplace.visualstudio.com/items?itemName=ms-python.python | . Now, create a file hello.py. (Naming convention: modules (filenames) should have short, all-lowercase names, and they can contain underscores.) . Type in the following code (don&#39;t forget to change to your first name): . print(&#39;Hello, Zhi&#39;) . Then execute this Python program in Command Prompt. . . Cool! Greeting from your machine. . However, if we create a file calc.py using the below code: . 39 + 41 + 33 . What do we get after executing this program? . python calc.py . Nothing. . We need to modify the code as below: . print(39 + 41 + 33) . Re-run the file. I guess you get the correct result. . Arithmetic operators . Try other operators: -,* and /. . 2021 - 2000 . 15 / 3 . Q. Why is the result 5.0 instead of 5? . Finally, the operator ** performs exponentiation; that is, it raises a number to a power: . 2 ** 6 . Exercise 01 . Whenever you are experimenting with a new feature, you should try to make mistakes. For example, in the &quot;Hello, world!&quot; program, what happens if you leave out one of the quotation marks? What if you leave out both? What if you spell print wrong? . In a print statement, what happens if you leave out one of the parentheses, or both? | If you are trying to print a string, what happens if you leave out one of the quotation marks, or both? | You can use a minus sign to make a negative number like -2. What happens if you put a plus sign before a number? What about 2++2? | In math notation, leading zeros are ok, as in 02. What happens if you try this in Python? | What happens if you have two values with no operator between them? | Exercise 02 . Rewrite calc.py to solve the following questions. . How many seconds are there in 42 minutes 42 seconds? | How many miles are there in 10 kilometers? Hint: there are 1.61 kilometers in a mile. | If you run a 10 kilometer race in 42 minutes 42 seconds, what is your average pace (time per mile in minutes and seconds)? What is your average speed in miles per hour? |",
            "url": "https://oim3640.github.io/blog/python/2021/09/20/01-intro.html",
            "relUrl": "/python/2021/09/20/01-intro.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . print(&#39;The comment #hide_input was used to hide the code that produced this.&#39;) . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . df = pd.read_json(movies) # load movies data df.columns = [x.replace(&#39; &#39;, &#39;_&#39;) for x in df.columns.values] genres = df[&#39;Major_Genre&#39;].unique() # get unique field values genres = list(filter(lambda d: d is not None, genres)) # filter out None values genres.sort() # sort alphabetically . mpaa = [&#39;G&#39;, &#39;PG&#39;, &#39;PG-13&#39;, &#39;R&#39;, &#39;NC-17&#39;, &#39;Not Rated&#39;] . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://oim3640.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Footnotes . This is the footnote. &#8617; . |",
            "url": "https://oim3640.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://oim3640.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://oim3640.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}